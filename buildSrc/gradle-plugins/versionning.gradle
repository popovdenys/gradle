/**
 * Gradle versionning plugin
 * versionning.gradle
 */

ext {
	version = []
}

/**
 * VERSIONNING
 */

import api.project.version.*

version = new Version( versionFile ).getVersion( )

task printVersion(group: groups.version, description : 'Get project version') {
	
	doLast {
		
		logger.quiet "Version : $version"
		
	}
}

task makeReleaseVersion(type : ReleaseVersionTask, group : groups.version, description : 'Make a project release version') {
	release = version.release
	destFile = versionFile
}
/*
task incrementMajorVersion(type : IncrementMajorVersion, group : groups.version, description : 'Increment a project major version') {
	major = version.major
	destFile = versionFile
}
*/
tasks.addRule("Pattern : increment<Classifier>Version - Increments the project version classifier") { String taskName -> 
	
	if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
		
		task(taskName) {
			
			doLast {
				String classifier = (taskName - 'increment' - 'Version').toLowerCase()
				
				String currentProjectVersion = version.toString()
				
				switch(classifier) {
					case 'major' : ++version.major
								   break
								   
					case 'minor' : ++version.minor
								   break
								   
					default : throw new GradleException("Invalid version type $classifier. Allowed types : ['Major', 'Minor']")
				}
				
				String newProjectVersion = version.toString()
				
				println "Incrementing $classifier project version : $currentProjectVersion -> $newProjectVersion"
				
				ant.propertyfile( file : versionFile ) {
					
					entry( key: classifier, type: 'int', operation: '+', value: 1 )
					
				}
			}
		}
	}
}